name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Set minimal permissions for GITHUB_TOKEN (security hardening)
permissions:
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      packages: ${{ steps.filter.outputs.packages }}
      web: ${{ steps.filter.outputs.web }}
      server: ${{ steps.filter.outputs.server }}
      contracts: ${{ steps.filter.outputs.contracts }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            packages:
              - 'packages/**'
            web:
              - 'apps/web/**'
              - 'packages/**'
            server:
              - 'apps/server/**'
              - 'packages/**'
            contracts:
              - 'packages/contracts/**'

  # Security scanning for dependencies
  security-scan:
    needs: changes
    if: ${{ needs.changes.outputs.packages == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.server == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write # Required for uploading SARIF results
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Updated to Node 20 for better security
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run dependency audit
        run: pnpm audit --audit-level high

      - name: Run security scan with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Fast Biome checks (formatting and linting)
  biome-check:
    needs: changes
    if: ${{ needs.changes.outputs.packages == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.server == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      # Cache Biome binary for faster subsequent runs
      - name: Cache Biome
        uses: actions/cache@v4
        with:
          path: ~/.cache/biome
          key: ${{ runner.os }}-biome-${{ hashFiles('**/biome.json') }}
          restore-keys: |
            ${{ runner.os }}-biome-

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      # Fast Biome CI check (includes formatting, linting, and import sorting)
      - name: Biome CI Check
        run: pnpm run check:ci

      # Report formatting issues as annotations
      - name: Check Formatting
        if: failure()
        run: |
          echo "::error::Code formatting issues detected. Run 'pnpm run format' to fix."
          pnpm run format:check

  lint-and-typecheck:
    needs: [changes, biome-check]
    if: ${{ needs.changes.outputs.packages == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.server == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Build packages
        run: |
          cd packages/common && pnpm run build
          cd ../contracts && pnpm run build
      - name: Type check
        run: pnpm run check-types
      - name: Test
        run: pnpm run test

  test-contracts:
    needs: changes
    if: ${{ needs.changes.outputs.contracts == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Build packages
        run: |
          cd packages/common && pnpm run build
          cd ../contracts && pnpm run build
      - name: Type check contracts
        run: pnpm run check-types

  test-e2e:
    needs: changes
    if: ${{ needs.changes.outputs.web == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Build packages
        run: |
          cd packages/common && pnpm run build
          cd ../contracts && pnpm run build
      - name: Install Playwright browsers
        run: pnpx playwright install --with-deps
      - name: Run E2E tests
        working-directory: ./apps/web
        run: pnpm run test:e2e

  # Build web application
  build-web:
    needs: [changes, lint-and-typecheck]
    if: ${{ needs.changes.outputs.web == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Build packages
        run: |
          cd packages/common && pnpm run build
          cd ../contracts && pnpm run build
      - name: Build web application
        run: pnpm --filter web build

  # Build server application
  build-server:
    needs: [changes, lint-and-typecheck]
    if: ${{ needs.changes.outputs.server == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Build packages
        run: |
          cd packages/common && pnpm run build
          cd ../contracts && pnpm run build
      - name: Build server application
        run: pnpm --filter server build
