version: v1.0
account_id: ${TENDERLY_ACCOUNT_NAME}
project_slug: valkyriefinance

contracts:
  - name: ValkyrieVault
    address: ""
    network_id: "1"
    
  - name: ValkyrieAutomation  
    address: ""
    network_id: "1"
    
  - name: ValkyriePriceOracle
    address: ""
    network_id: "1"
    
  - name: ValkyrieToken
    address: ""
    network_id: "1"

# Virtual TestNet Configuration
virtual_testnets:
  ai-vault-devnet:
    display_name: "AI Vault Development Network"
    fork_config:
      network_id: "1"
      block_number: latest
      chain_config:
        chain_id: 73571
    explorer:
      enabled: true
      verification_visibility: public

# Monitoring and Alerts
alerts:
  - name: "AI Risk Threshold Breach"
    description: "Alert when AI detects risk above configured threshold"
    rule:
      type: "event-emitted"
      filters:
        - eventSignature: "RiskThresholdBreached(uint256,uint256)"
          network: "1"
          address: "${VALKRYIE_VAULT_ADDRESS}"
    notifications:
      - type: "slack"
        channel: "#vault-alerts"
        webhook: "${SLACK_WEBHOOK_URL}"
      - type: "webhook"
        url: "${EMERGENCY_WEBHOOK_URL}"
        
  - name: "Large Withdrawal Detection"
    description: "Monitor for withdrawals above $1M"
    rule:
      type: "function-call"
      filters:
        - functionSignature: "withdraw(uint256,address,address)"
          network: "1" 
          address: "${VALKRYIE_VAULT_ADDRESS}"
          parameterFilters:
            - parameter: "assets"
              condition: "gte"
              value: "1000000000000" # $1M in 6 decimal USDC
    notifications:
      - type: "email"
        to: ["security@valkyrie.finance"]
        
  - name: "Emergency Pause Triggered"
    description: "Alert when vault is paused by AI or admin"
    rule:
      type: "event-emitted"
      filters:
        - eventSignature: "EmergencyPause(bool,string)"
          network: "1"
          address: "${VALKRYIE_VAULT_ADDRESS}"
    notifications:
      - type: "slack"
        channel: "#critical-alerts"
        webhook: "${SLACK_WEBHOOK_URL}"
      - type: "pagerduty"
        integration_key: "${PAGERDUTY_KEY}"
        
  - name: "AI Rebalance Execution"
    description: "Track AI-driven rebalancing operations"
    rule:
      type: "event-emitted"
      filters:
        - eventSignature: "AIRebalanceExecuted(address,uint256,uint256[])"
          network: "1"
          address: "${VALKRYIE_VAULT_ADDRESS}"
    notifications:
      - type: "slack"
        channel: "#ai-operations"
        webhook: "${SLACK_WEBHOOK_URL}"
        
  - name: "Cross-Chain Operation"
    description: "Monitor cross-chain asset movements"
    rule:
      type: "event-emitted"
      filters:
        - eventSignature: "CrossChainRebalance(uint64,uint256,bytes32)"
          network: "1"
          address: "${VALKRYIE_VAULT_ADDRESS}"
    notifications:
      - type: "slack"
        channel: "#cross-chain"
        webhook: "${SLACK_WEBHOOK_URL}"
        
  - name: "High Gas Usage"
    description: "Alert when transactions consume excessive gas"
    rule:
      type: "function-call"
      filters:
        - network: "1"
          address: "${VALKRYIE_VAULT_ADDRESS}"
          gasUsed: 
            condition: "gte"
            value: "500000" # 500k gas
    notifications:
      - type: "slack"
        channel: "#gas-optimization"
        webhook: "${SLACK_WEBHOOK_URL}"

# Web3 Actions for automated responses
actions:
  - name: "ai-analysis-logger"
    description: "Log AI analysis results to external system"
    trigger:
      type: "event"
      event: "AIResponseReceived"
      contract: "ValkyrieAutomation"
    runtime: "v2"
    sources:
      - name: "index.js"
        content: |
          const { ethers } = require('ethers');
          
          const main = async (context) => {
            const { events } = context;
            
            for (const event of events) {
              const { requestId, action, riskScore } = event.args;
              
              // Log to external analytics system
              await fetch('https://api.valkyrie.finance/ai-analytics', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  timestamp: new Date().toISOString(),
                  requestId,
                  action: action.toString(),
                  riskScore: riskScore.toString(),
                  blockNumber: event.blockNumber,
                  transactionHash: event.transactionHash
                })
              });
            }
          };
          
          module.exports = { main };

  - name: "emergency-response"
    description: "Automated emergency response system"
    trigger:
      type: "event"
      event: "EmergencyPause"
      contract: "ValkyrieVault"
    runtime: "v2"
    sources:
      - name: "index.js"
        content: |
          const main = async (context) => {
            const { events } = context;
            
            for (const event of events) {
              const { paused, reason } = event.args;
              
              if (paused) {
                // Notify emergency contacts
                await fetch(process.env.EMERGENCY_WEBHOOK, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    alert: 'CRITICAL',
                    message: `Vault emergency pause: ${reason}`,
                    timestamp: new Date().toISOString(),
                    blockNumber: event.blockNumber
                  })
                });
                
                // Trigger incident response
                await fetch(process.env.INCIDENT_RESPONSE_URL, {
                  method: 'POST',
                  headers: { 
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.INCIDENT_API_KEY}`
                  },
                  body: JSON.stringify({
                    title: 'Valkyrie Vault Emergency Pause',
                    description: `Vault paused: ${reason}`,
                    priority: 'critical',
                    assignee: 'security-team'
                  })
                });
              }
            }
          };
          
          module.exports = { main };

# Simulation Templates
simulations:
  - name: "ai-rebalance-simulation"
    description: "Template for simulating AI rebalancing operations"
    network_id: "1"
    block_number: "latest"
    gas_limit: 1000000
    
  - name: "emergency-scenario"
    description: "Simulate emergency pause scenarios"
    network_id: "1" 
    block_number: "latest"
    state_overrides:
      - address: "${VALKRYIE_VAULT_ADDRESS}"
        storage:
          # Override paused state
          "0x0": "0x0000000000000000000000000000000000000000000000000000000000000001"

# Analytics Dashboard Configuration
analytics:
  dashboards:
    - name: "ai-vault-performance"
      description: "Comprehensive AI vault performance metrics"
      widgets:
        - type: "line-chart"
          title: "Total Assets Under Management"
          query: "vault_total_assets"
          timeframe: "7d"
          
        - type: "gauge"
          title: "Current Risk Score"
          query: "current_risk_score"
          max_value: 100
          warning_threshold: 75
          critical_threshold: 90
          
        - type: "bar-chart"
          title: "AI Rebalancing Frequency"
          query: "ai_rebalance_count"
          timeframe: "30d"
          
        - type: "table"
          title: "Strategy Allocations"
          query: "current_strategy_allocations"
          
        - type: "line-chart"
          title: "Gas Usage Trends"
          query: "gas_usage_by_function"
          timeframe: "7d"

# Development Workflow Integration
workflows:
  testing:
    virtual_testnet: "ai-vault-devnet"
    auto_verify: true
    gas_profiling: true
    
  staging:
    virtual_testnet: "ai-vault-staging"
    monitoring_enabled: true
    alert_channels: ["#staging-alerts"]
    
  production:
    network_id: "1"
    monitoring_enabled: true
    alert_channels: ["#production-alerts", "#critical-alerts"]
    auto_incident_creation: true 